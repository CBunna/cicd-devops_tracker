services:
  database:
    image: postgres:15-alpine
    container_name: devops_tracker_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devops_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - devops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d devops_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: builder
    container_name: devops_tracker_api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-5002}
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-devops_tracker}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5002:5002"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - devops_network
    volumes:
      # For development: mount source code
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: devops_tracker_web
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - devops_network
    environment:
      - REACT_APP_API_URL=http://localhost:5002

networks:
  devops_network:
    driver: bridge
    name: devops_tracker_network

volumes:
  postgres_data:
    name: devops_tracker_postgres_data
